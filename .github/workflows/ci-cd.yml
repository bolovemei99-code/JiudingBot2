name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - 'copilot/**'  # Allow testing on copilot branches
  pull_request:
    branches:
      - '**'  # Trigger on PRs to any branch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          # Note: No tests currently exist. Add pytest tests in a tests/ directory.
          # pytest tests/ -v || echo "No tests found, skipping..."
          echo "Test step placeholder - add pytest tests to enable"

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-ssh:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && vars.DEPLOY_METHOD == 'ssh'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        env:
          SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}
          SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}
          SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known_hosts
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
          
          # Deploy script
          ssh -i ~/.ssh/deploy_key "$SSH_USER@$SSH_HOST" << 'ENDSSH'
            set -e
            cd /opt/jiudingbot2 || mkdir -p /opt/jiudingbot2 && cd /opt/jiudingbot2
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove old container
            docker stop jiudingbot2 || true
            docker rm jiudingbot2 || true
            
            # Run new container
            docker run -d \
              --name jiudingbot2 \
              --restart unless-stopped \
              -e BOT_TOKEN="${{ secrets.BOT_TOKEN }}" \
              -e PLATFORM_URL="${{ secrets.PLATFORM_URL }}" \
              -v /opt/jiudingbot2/data:/app/data \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Wait for health check
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              if docker inspect --format='{{.State.Health.Status}}' jiudingbot2 2>/dev/null | grep -q "healthy"; then
                echo "Container is healthy!"
                exit 0
              fi
              sleep 2
            done
            
            echo "Container health check failed"
            docker logs jiudingbot2
            exit 1
          ENDSSH

      - name: Verify deployment
        if: success()
        run: |
          echo "Deployment successful!"

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && vars.DEPLOY_METHOD == 'kubernetes'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update deployment image
        run: |
          kubectl set image deployment/jiudingbot2 \
            jiudingbot2=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --record

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/jiudingbot2 --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -l app=jiudingbot2
          kubectl describe deployment jiudingbot2

  deploy-manual:
    name: Manual Deployment Trigger
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Manual deployment placeholder
        run: |
          echo "Manual deployment triggered"
          echo "Configure DEPLOY_METHOD variable to 'ssh' or 'kubernetes'"
          echo "Set required secrets in repository settings"
